# -*- coding: utf-8 -*-
"""Content Based Recommender (Description Based).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ef8zILzEyzuSE8lMwwLbnoG94uhNAFXy
"""

# importing libraries
import pandas as pd
from sklearn.metrics.pairwise import linear_kernel
from sklearn.feature_extraction.text import TfidfVectorizer

# reading file
book_description = pd.read_csv('description.csv', encoding = 'latin-1')

# checking if we have the right data
book_description.head()

# removing the stop words
books_tfidf = TfidfVectorizer(stop_words='english')
# replace NaN with empty strings
book_description['description'] = book_description['description'].fillna('')
# computing TF-IDF matrix required for calculating cosine similarity
book_description_matrix = books_tfidf.fit_transform(book_description['description'])

# Let's check the shape of computed matrix
book_description_matrix.shape

# compuing cosine similarity matrix using linear_kernal of sklearn
cosine_similarity = linear_kernel(book_description_matrix, book_description_matrix)

# Get the pairwsie similarity scores of all books compared to the book passed by index, sorting them and getting top 5
# here 2 is the index of the book in dataset
similarity_scores = list(enumerate(cosine_similarity[2]))
similarity_scores = sorted(similarity_scores, key=lambda x: x[1], reverse=True)
similarity_scores = similarity_scores[1:6]

# Get the similar books index
books_index = [i[0] for i in similarity_scores]

    # Return the top 5 most similar books using integer-location based indexing (iloc)
print (book_description['name'].iloc[books_index])